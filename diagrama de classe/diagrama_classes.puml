@startuml diagrama_de_classes
skinparam classAttributeIconSize 0
skinparam dpi 300

' Estilo visual
skinparam rectangle {
  RoundCorner 15
  Shadowing false
}

' Classes
class Usuario {
  - id_usuario: Integer
  - email: String
  - senha_hash: String
  - nome_completo: String
  - data_cadastro: Date
  - data_atualizacao: Date
  + realizarLogin(email: String, senha: String): Boolean
  + realizarLogout(): void
  + atualizarPerfil(dados): void
  + solicitarRecuperacaoSenha(): void
}

class Administrador {
  - nivel_acesso: String
  + gerenciarUsuario(usuario: Usuario, acao: String): void
  + gerenciarVaga(vaga: Vaga, acao: String): void
  + visualizarLogsSistema(): List<String>
}

class Candidato {
  - cpf: String
  - telefone: String
  - data_nascimento: Date
  - linkedin_url: String
  - portfolio_url: String
  + cadastrarCurriculo(curriculo: Curriculo): void
  + atualizarCurriculo(curriculo: Curriculo): void
  + visualizarCurriculo(): Curriculo
  + candidatarAVaga(vaga: Vaga): Candidatura
  + visualizarMinhasCandidaturas(): List<Candidatura>
}

class Curriculo {
  - id_curriculo: Integer
  - objetivo_profissional: String
  - experiencia_profissional_texto: String
  - formacao_academica_texto: String
  - habilidades_texto: String
  - idiomas_texto: String
  - data_atualizacao: Date
  + validarDados(): Boolean
  + formatarParaVisualizacao(): String
}

class Vaga {
  - id_vaga: Integer
  - titulo_vaga: String
  - descricao_completa: String
  - requisitos_obrigatorios: String
  - tipo_contratacao: String
  - modalidade: String
  - localizacao: String
  - faixa_salarial_min: Double
  - faixa_salarial_max: Double
  - data_publicacao: Date
  - status_vaga: String
  + verificarSeEstaAberta(): Boolean
  + receberCandidatura(candidatura: Candidatura): void
}

class Candidatura {
  - id_candidatura: Integer
  - data_candidatura: Date
  - status_candidatura: String
  - observacoes_empresa: String
  + atualizarStatus(novoStatus: String): void
}

class Empresa {
  - cnpj: String
  - razao_social: String
  - setor_atuacao: String
  - descricao_empresa: String
  - website_url: String
  - logo_path: String
  + publicarVaga(vaga: Vaga): void
  + editarVaga(vaga: Vaga): void
  + fecharVaga(vaga: Vaga): void
  + visualizarCandidaturas(): List<Candidatura>
  + alterarStatusCandidatura(candidatura: Candidatura, novoStatus: String): void
}

' Herança
Administrador --|> Usuario
Candidato --|> Usuario
Empresa --|> Usuario

' Relacionamentos com notas para não sobreporem texto

' Candidato <-> Curriculo
Candidato --> Curriculo : possui
note right on link
  1 → 0..1
end note

' Candidato <-> Candidatura
Candidato --> Candidatura : realiza
note right on link
  1 → 0..*
end note

' Vaga <-> Candidatura
Vaga --> Candidatura : recebe
note right on link
  1 → 0..*
end note

' Empresa <-> Vaga
Empresa --> Vaga : publica/gerencia
note right on link
  1 → 0..*
end note

@enduml
